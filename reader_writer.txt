#include<pthread.h>
 #include<stdio.h>
 #include<stdlib.h>
 pthread_mutex_t x,wsem;
 pthread_t tid;
 int readcount;
 void initialize()
 {
 pthread_mutex_init(&x, NULL);
 pthread_mutex_init(&wsem, NULL);
 readcount=0;
 }
 void *reader(void * param)
 {
 int waittime;
 waittime=rand()%5;
 printf("\nReader is trying to enter");
 pthread_mutex_lock(&x);
 readcount++;
 if(readcount==1)
 pthread_mutex_lock(&wsem);
 printf("\n %d Reader is inside \n",readcount);
 pthread_mutex_unlock(&x);
 sleep(waittime);
 pthread_mutex_lock(&x);
 readcount--;
 if(readcount==0)
 pthread_mutex_unlock(&wsem);
 pthread_mutex_unlock(&x);
 printf("\nReader %d is leaving \n",readcount);
 }
 void *writer(void * param)
 {
 int waittime;
 waittime=rand()%3;
 printf("\nWriter is trying to enter \n");
 pthread_mutex_lock(&wsem);
 printf("\nWriter has entered ");
 sleep(waittime);
 pthread_mutex_unlock(&wsem);
 printf("\nWriter is leaving \n ");
sleep(30);
 exit(0);
 }
 int main()
 {
 int a,b,i;
 printf("\nEnter the number of readers : ");
 scanf("%d",&a);
 printf("\nEnter the number of writers : ");
 scanf("%d",&b);
 for(i=0;i<a;i++)
 pthread_create(&tid,NULL,reader,NULL);
 for(i=0;i<b;i++)
 pthread_create(&tid,NULL,writer,NULL);
 sleep(30);
 exit(0);
 }
